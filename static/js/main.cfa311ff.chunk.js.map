{"version":3,"sources":["logo.svg","components/weather/weathercard.js","components/weather/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","temp","humidity","pressure","weathermood","name","speed","country","sunset","React","useState","weatherState","setWeatheState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,iDCkHAA,EAhHK,SAAC,GASd,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,QACAC,EACI,EADJA,OAEA,EAAuCC,IAAMC,SAAS,IAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,GAAIT,EACF,OAAQA,GACN,IAAK,SACHQ,EAAe,iBACf,MACF,IAAK,OACHA,EAAe,UACf,MACF,IAAK,QACHA,EAAe,gBACf,MACF,IAAK,OACHA,EAAe,WACf,MAEF,QACEA,EAAe,mBAIpB,CAACR,IAGJ,IACIU,EAAO,IAAIC,KAAW,IADhBP,GAENQ,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cACzC,OACE,mCACE,0BAASC,UAAU,SAAnB,UACE,qBAAKA,UAAU,cAAf,SACE,mBAAGA,UAAS,aAAQR,OAGtB,sBAAKQ,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,iCAAOlB,EAAP,YAGF,sBAAKkB,UAAU,cAAf,UACE,qBAAKA,UAAU,mBAAf,SAAmCf,IACnC,sBAAKe,UAAU,QAAf,UACGd,EADH,KACWE,WAKf,sBAAKY,UAAU,OAAf,eAAwB,IAAIJ,MAAOK,iBAAnC,OAGA,sBAAKD,UAAU,aAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,mBAEhB,oBAAGA,UAAU,sBAAb,UACGH,EADH,OACe,uBADf,eAMF,sBAAKG,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,qBAEhB,oBAAGA,UAAU,sBAAb,UACGjB,EADH,IACa,uBADb,oBAOJ,sBAAKiB,UAAU,qBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,iBAEhB,oBAAGA,UAAU,sBAAb,UACGhB,EADH,IACa,uBADb,iBAMF,sBAAKgB,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,wBAEhB,oBAAGA,UAAU,sBAAb,UACGb,EADH,IACU,uBADV,0BC/BCe,G,MAnEF,WACX,MAAsCX,mBAAS,eAA/C,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAAgCb,mBAAS,IAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KAEMC,EAAc,uCAAG,oDAAAC,EAAA,sEAEfC,EAFe,4DAE4CN,EAF5C,iEAIHO,MAAMD,GAJH,cAIfE,EAJe,gBAKFA,EAAIC,OALF,OAKfC,EALe,SAOkBA,EAAKC,KAAlChC,EAPW,EAOXA,KAAMC,EAPK,EAOLA,SAAUC,EAPL,EAOKA,SACVC,EAAgB4B,EAAKE,QAAQ,GAAnCD,KACA5B,EAAS2B,EAAT3B,KACAC,EAAU0B,EAAKG,KAAf7B,MAVW,EAWS0B,EAAKI,IAAzB7B,EAXW,EAWXA,QAASC,EAXE,EAWFA,OAajBiB,EAXyB,CACvBxB,OACAC,WACAC,WACAC,cACAC,OACAC,QACAC,UACAC,WArBiB,kDA0BnB6B,QAAQC,IAAR,MA1BmB,0DAAH,qDAkCpB,OAJAzB,qBAAU,WACRa,MACC,IAGD,qCACE,qBAAKP,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,uBACEoB,KAAK,SACLC,YAAY,YACZC,WAAS,EACTC,GAAG,SACHvB,UAAU,aACVwB,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAesB,EAAEC,OAAOH,UAG3C,wBACExB,UAAU,eACVoB,KAAK,SACLQ,QAASrB,EAHX,yBAUJ,cAAC,EAAD,eAAiBF,SCrDRwB,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCIS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cfa311ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from \"react\";\r\n\r\nconst Weathercard = ({\r\n  temp,\r\n  humidity,\r\n  pressure,\r\n  weathermood,\r\n  name,\r\n  speed,\r\n  country,\r\n  sunset,\r\n}) => {\r\n  const [weatherState, setWeatheState] = React.useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (weathermood) {\r\n      switch (weathermood) {\r\n        case \"Clouds\":\r\n          setWeatheState(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          setWeatheState(\"wi-fog\");\r\n          break;\r\n        case \"Clear\":\r\n          setWeatheState(\"wi-day-sunny\");\r\n          break;\r\n        case \"Mist\":\r\n          setWeatheState(\"wi-dust\");\r\n          break;\r\n\r\n        default:\r\n          setWeatheState(\"wi-day-sunny\");\r\n          break;\r\n      }\r\n    }\r\n  }, [weathermood]);\r\n\r\n\r\n  let sec = sunset;\r\n  let date = new Date(sec * 1000);\r\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n  return (\r\n    <>\r\n      <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherState}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{temp}&deg;</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{weathermood}</div>\r\n            <div className=\"place\">\r\n              {name}, {country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"date\"> {new Date().toLocaleString()} </div>\r\n\r\n\r\n        <div className=\"extra-temp\">\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-sunset\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {timeStr} PM <br />\r\n                Sunset\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-humidity\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {humidity} <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-rain\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {pressure} <br />\r\n                Pressure\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-strong-wind\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {speed} <br />\r\n                Speed\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weathercard;","import React, { useState, useEffect } from \"react\";\r\nimport Weathercard from \"./weathercard\";\r\nimport \"./style.css\";\r\n\r\nconst Temp = () => {\r\n  const [searchValue, setSearchValue] = useState(\"Kurukshetra\");\r\n  const [tempInfo, setTempInfo] = useState({});\r\n\r\n  const getWeatherInfo = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=3ed43f43d43fc661a8aac64f69c75e51`;\r\n\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0];\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      const myNewWeatherInfo = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n\r\n      setTempInfo(myNewWeatherInfo);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"search...\"\r\n            autoFocus\r\n            id=\"search\"\r\n            className=\"searchTerm\"\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value)}\r\n          />\r\n\r\n          <button\r\n            className=\"searchButton\"\r\n            type=\"button\"\r\n            onClick={getWeatherInfo}>\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Weathercard {...tempInfo} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Temp;","import logo from './logo.svg';\nimport './App.css';\n\n\nimport Temp from './components/weather/Temp'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Temp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}